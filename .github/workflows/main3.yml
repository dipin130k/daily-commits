name: Advanced GitHub Profile Enhancer

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at noon UTC
    - cron: '0 0 * * 1'   # Extra run on Mondays at midnight UTC
  workflow_dispatch:
    inputs:
      commit_type:
        description: 'Type of content to generate'
        required: true
        default: 'random'
        type: choice
        options:
          - random
          - code
          - quote
          - stats
          - project

jobs:
  enhance-profile:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for stats
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests matplotlib numpy pandas pyyaml pygithub colorama
    
    - name: Set up Git identity
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
    
    - name: Determine content type
      id: content_type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "type=${{ github.event.inputs.commit_type }}" >> $GITHUB_OUTPUT
        else
          TYPES=("code" "quote" "stats" "project")
          RANDOM_INDEX=$(( RANDOM % 4 ))
          echo "type=${TYPES[$RANDOM_INDEX]}" >> $GITHUB_OUTPUT
        fi
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "timestamp=$(date +'%H:%M:%S %Z')" >> $GITHUB_OUTPUT
    
    - name: Generate code sample
      if: steps.content_type.outputs.type == 'code' || steps.content_type.outputs.type == 'random'
      run: |
        mkdir -p showcase/code_samples
        
        # Generate Python data visualization sample
        cat > showcase/code_samples/data_viz_${{ steps.content_type.outputs.date }}.py << 'EOF'
        import matplotlib.pyplot as plt
        import numpy as np
        from datetime import datetime, timedelta

        # Generate time series data
        def generate_trending_data(days=30, volatility=0.1):
            base = 100
            trend = np.linspace(0, 20, days)
            noise = np.random.normal(0, volatility * base, days)
            seasonal = 10 * np.sin(np.linspace(0, 2 * np.pi, days))
            return base + trend + noise + seasonal

        # Create datasets
        days = 30
        today = datetime.now()
        dates = [today - timedelta(days=i) for i in range(days)]
        dates.reverse()
        
        metrics = {
            'User Growth': generate_trending_data(days, 0.08),
            'Engagement': generate_trending_data(days, 0.15),
            'Retention': generate_trending_data(days, 0.05) * 0.8,
        }

        # Create stylish visualization
        plt.figure(figsize=(12, 7))
        plt.style.use('ggplot')
        
        for label, data in metrics.items():
            plt.plot(dates, data, linewidth=2, marker='o', markersize=4, alpha=0.8, label=label)
            
        plt.title('Key Performance Metrics', fontsize=16, fontweight='bold')
        plt.xlabel('Date')
        plt.ylabel('Score')
        plt.grid(True, alpha=0.3)
        plt.legend(loc='upper left')
        
        # Add annotations for latest values
        for label, data in metrics.items():
            plt.annotate(f'{data[-1]:.1f}', 
                        xy=(dates[-1], data[-1]),
                        xytext=(10, 0),
                        textcoords='offset points',
                        fontsize=9,
                        fontweight='bold')
                        
        plt.tight_layout()
        plt.savefig('performance_trends.png')
        print("Data visualization generated successfully!")
        EOF
        
        # Generate JavaScript interactive component
        cat > showcase/code_samples/interactive_component_${{ steps.content_type.outputs.date }}.js << 'EOF'
        class DynamicCarousel {
          constructor(containerId, options = {}) {
            this.container = document.getElementById(containerId);
            this.options = {
              autoplay: options.autoplay || true,
              interval: options.interval || 3000,
              transitionEffect: options.transitionEffect || 'slide',
              indicators: options.indicators || true,
              ...options
            };
            
            this.slides = [];
            this.currentIndex = 0;
            this.intervalId = null;
            
            this.init();
          }
          
          init() {
            // Create carousel structure
            this.container.classList.add('dynamic-carousel');
            
            // Create slide container
            this.slideContainer = document.createElement('div');
            this.slideContainer.classList.add('carousel-slides');
            this.container.appendChild(this.slideContainer);
            
            // Add controls if needed
            if (this.options.controls) {
              this.createControls();
            }
            
            // Add indicators if needed
            if (this.options.indicators) {
              this.indicatorsContainer = document.createElement('div');
              this.indicatorsContainer.classList.add('carousel-indicators');
              this.container.appendChild(this.indicatorsContainer);
            }
            
            // Add event listeners
            this.container.addEventListener('mouseenter', () => this.pause());
            this.container.addEventListener('mouseleave', () => {
              if (this.options.autoplay) this.play();
            });
            
            // Apply custom styles
            this.applyStyles();
          }
          
          createControls() {
            const prevBtn = document.createElement('button');
            prevBtn.classList.add('carousel-control', 'prev');
            prevBtn.innerHTML = '❮';
            prevBtn.addEventListener('click', () => this.goTo(this.currentIndex - 1));
            
            const nextBtn = document.createElement('button');
            nextBtn.classList.add('carousel-control', 'next');
            nextBtn.innerHTML = '❯';
            nextBtn.addEventListener('click', () => this.goTo(this.currentIndex + 1));
            
            this.container.appendChild(prevBtn);
            this.container.appendChild(nextBtn);
          }
          
          addSlide(content) {
            const slide = document.createElement('div');
            slide.classList.add('carousel-slide');
            
            if (typeof content === 'string') {
              slide.innerHTML = content;
            } else if (content instanceof HTMLElement) {
              slide.appendChild(content);
            }
            
            this.slideContainer.appendChild(slide);
            this.slides.push(slide);
            
            // Update indicators
            if (this.options.indicators) {
              const indicator = document.createElement('span');
              indicator.classList.add('indicator');
              indicator.addEventListener('click', () => this.goTo(this.slides.length - 1));
              this.indicatorsContainer.appendChild(indicator);
            }
            
            // Show first slide
            if (this.slides.length === 1) {
              this.goTo(0);
              if (this.options.autoplay) this.play();
            }
            
            return this;
          }
          
          goTo(index) {
            // Handle index bounds
            if (index < 0) index = this.slides.length - 1;
            if (index >= this.slides.length) index = 0;
            
            // Update classes
            this.slides[this.currentIndex].classList.remove('active');
            this.slides[index].classList.add('active');
            
            // Update indicators
            if (this.options.indicators) {
              const indicators = this.indicatorsContainer.querySelectorAll('.indicator');
              indicators[this.currentIndex].classList.remove('active');
              indicators[index].classList.add('active');
            }
            
            this.currentIndex = index;
            return this;
          }
          
          next() {
            return this.goTo(this.currentIndex + 1);
          }
          
          prev() {
            return this.goTo(this.currentIndex - 1);
          }
          
          play() {
            this.pause();
            this.intervalId = setInterval(() => this.next(), this.options.interval);
            return this;
          }
          
          pause() {
            if (this.intervalId) {
              clearInterval(this.intervalId);
              this.intervalId = null;
            }
            return this;
          }
          
          applyStyles() {
            // Apply basic styles to carousel container
            const style = document.createElement('style');
            style.textContent = `
              .dynamic-carousel {
                position: relative;
                overflow: hidden;
                width: 100%;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
              }
              .carousel-slides {
                display: flex;
                transition: transform 0.4s ease;
              }
              .carousel-slide {
                min-width: 100%;
                opacity: 0;
                transition: opacity 0.4s ease;
              }
              .carousel-slide.active {
                opacity: 1;
              }
              .carousel-indicators {
                position: absolute;
                bottom: 15px;
                left: 50%;
                transform: translateX(-50%);
                display: flex;
                gap: 8px;
              }
              .indicator {
                width: 10px;
                height: 10px;
                border-radius: 50%;
                background: rgba(255,255,255,0.5);
                cursor: pointer;
                transition: all 0.3s ease;
              }
              .indicator.active {
                background: #fff;
                transform: scale(1.2);
              }
              .carousel-control {
                position: absolute;
                top: 50%;
                transform: translateY(-50%);
                background: rgba(0,0,0,0.3);
                border: none;
                color: white;
                font-size: 18px;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                cursor: pointer;
                opacity: 0.7;
                transition: opacity 0.3s;
              }
              .carousel-control:hover {
                opacity: 1;
              }
              .prev { left: 10px; }
              .next { right: 10px; }
            `;
            document.head.appendChild(style);
          }
        }

        // Usage example:
        // const carousel = new DynamicCarousel('carousel-container', {
        //   autoplay: true,
        //   interval: 4000,
        //   controls: true,
        //   indicators: true
        // });
        // 
        // carousel
        //   .addSlide('<img src="image1.jpg" alt="Slide 1">')
        //   .addSlide('<img src="image2.jpg" alt="Slide 2">')
        //   .addSlide('<img src="image3.jpg" alt="Slide 3">');
        EOF
    
    - name: Generate motivational content
      if: steps.content_type.outputs.type == 'quote' || steps.content_type.outputs.type == 'random'
      run: |
        mkdir -p showcase/inspiration
        
        # Fetch a programming quote
        QUOTE=$(curl -s 'https://programming-quotesapi.vercel.app/api/random' | python -c "import sys, json; data=json.load(sys.stdin); print(f\"{data.get('quote', 'Code is like humor. When you have to explain it, it's bad.')} - {data.get('author', 'Anonymous')}\")")
        
        # Create an inspiration markdown file
        cat > showcase/inspiration/daily_wisdom_${{ steps.content_type.outputs.date }}.md << EOF
        # Daily Wisdom: ${{ steps.content_type.outputs.date }}

        > ${QUOTE}

        ## Today's Focus
        
        Three things to accomplish today:
        
        1. Write code that makes you proud
        2. Learn something that challenges you
        3. Help someone who's struggling
        
        ## Weekly Progress Tracker

        - [ ] Implement a new feature
        - [ ] Refactor legacy code
        - [ ] Review documentation
        - [ ] Share knowledge with team
        - [ ] Explore new technology
        
        ---
        
        *"The best way to predict the future is to invent it."*
        EOF
    
    - name: Generate repository stats
      if: steps.content_type.outputs.type == 'stats' || steps.content_type.outputs.type == 'random'
      run: |
        mkdir -p showcase/analytics
        
        # Create a Python script to generate stats
        cat > gen_stats.py << 'EOF'
        import os
        import subprocess
        import json
        import matplotlib.pyplot as plt
        import numpy as np
        from datetime import datetime, timedelta
        import random
        
        # Repository stats via git commands
        def get_git_stats():
            stats = {}
            
            # Total commits
            result = subprocess.run(['git', 'rev-list', '--count', 'HEAD'], 
                                    capture_output=True, text=True)
            stats['total_commits'] = int(result.stdout.strip())
            
            # Commits in last week
            last_week = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            result = subprocess.run(['git', 'rev-list', '--count', f'--since={last_week}', 'HEAD'], 
                                    capture_output=True, text=True)
            stats['recent_commits'] = int(result.stdout.strip())
            
            # Files count
            result = subprocess.run(['git', 'ls-files', '|', 'wc', '-l'], 
                                    capture_output=True, text=True, shell=True)
            stats['files_count'] = int(result.stdout.strip())
            
            # Generate weekly activity
            weeks = 12
            activity = []
            
            for i in range(weeks):
                start_date = (datetime.now() - timedelta(days=(i+1)*7)).strftime('%Y-%m-%d')
                end_date = (datetime.now() - timedelta(days=i*7)).strftime('%Y-%m-%d')
                
                result = subprocess.run(
                    ['git', 'rev-list', '--count', f'--since={start_date}', f'--until={end_date}', 'HEAD'], 
                    capture_output=True, text=True
                )
                
                try:
                    count = int(result.stdout.strip())
                except:
                    count = 0
                    
                activity.append({
                    'week': weeks - i,
                    'commits': count,
                    'start_date': start_date,
                    'end_date': end_date
                })
            
            activity.reverse()
            stats['weekly_activity'] = activity
            
            # File extensions count
            result = subprocess.run(['git', 'ls-files'], capture_output=True, text=True)
            files = result.stdout.strip().split('\n')
            extensions = {}
            
            for file in files:
                if '.' in file:
                    ext = file.split('.')[-1].lower()
                    if ext in extensions:
                        extensions[ext] += 1
                    else:
                        extensions[ext] = 1
            
            stats['extensions'] = extensions
            
            return stats
        
        # Generate a report
        def generate_report(stats, filename):
            with open(filename, 'w') as f:
                f.write(f"# Repository Analytics Report\n\n")
                f.write(f"*Generated on {datetime.now().strftime('%Y-%m-%d at %H:%M:%S')}*\n\n")
                
                f.write("## Summary\n\n")
                f.write(f"- Total commits: **{stats['total_commits']}**\n")
                f.write(f"- Commits in last week: **{stats['recent_commits']}**\n")
                f.write(f"- Total files: **{stats['files_count']}**\n\n")
                
                f.write("## Weekly Activity\n\n")
                f.write("| Week | Period | Commits |\n")
                f.write("|------|--------|--------|\n")
                
                for week in stats['weekly_activity']:
                    f.write(f"| Week {week['week']} | {week['start_date']} to {week['end_date']} | {week['commits']} |\n")
                
                f.write("\n## File Types\n\n")
                
                # Get top 10 file extensions
                top_extensions = sorted(stats['extensions'].items(), key=lambda x: x[1], reverse=True)[:10]
                
                f.write("| Extension | Count |\n")
                f.write("|-----------|-------|\n")
                
                for ext, count in top_extensions:
                    f.write(f"| .{ext} | {count} |\n")
        
        def generate_activity_chart(stats, filename):
            weeks = [f"Week {week['week']}" for week in stats['weekly_activity']]
            commits = [week['commits'] for week in stats['weekly_activity']]
            
            plt.figure(figsize=(12, 6))
            plt.style.use('ggplot')
            
            # Create bar chart
            bars = plt.bar(weeks, commits, color='#4CAF50', alpha=0.7)
            
            # Add trend line
            trend_x = np.arange(len(weeks))
            z = np.polyfit(trend_x, commits, 1)
            p = np.poly1d(z)
            plt.plot(weeks, p(trend_x), "r--", alpha=0.8)
            
            # Customize chart
            plt.title('Weekly Commit Activity', fontsize=16, fontweight='bold')
            plt.xlabel('Week')
            plt.ylabel('Number of Commits')
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            # Add value labels on bars
            for bar in bars:
                height = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2., height + 0.3,
                        f'{height}',
                        ha='center', va='bottom')
            
            plt.savefig(filename)
        
        def generate_file_types_chart(stats, filename):
            # Get top 8 file extensions
            top_extensions = sorted(stats['extensions'].items(), key=lambda x: x[1], reverse=True)[:8]
            exts = [f".{ext}" for ext, _ in top_extensions]
            counts = [count for _, count in top_extensions]
            
            # Create pie chart
            plt.figure(figsize=(10, 7))
            plt.style.use('ggplot')
            
            # Use custom colors
            colors = plt.cm.Paired(np.linspace(0, 1, len(exts)))
            
            # Create pie chart with shadow
            wedges, texts, autotexts = plt.pie(
                counts, 
                labels=exts,
                autopct='%1.1f%%',
                startangle=90,
                shadow=True,
                colors=colors,
                wedgeprops={'edgecolor': 'white', 'linewidth': 1}
            )
            
            # Customize text properties
            for autotext in autotexts:
                autotext.set_fontsize(9)
                autotext.set_fontweight('bold')
                
            plt.title('Repository File Types Distribution', fontsize=16, fontweight='bold')
            plt.axis('equal')  # Equal aspect ratio ensures pie is drawn as a circle
            plt.tight_layout()
            
            plt.savefig(filename)
        
        # Main execution
        try:
            stats = get_git_stats()
            
            # Ensure we have some data to work with
            if stats['total_commits'] == 0:
                # Create synthetic data for demo purposes
                stats['total_commits'] = random.randint(15, 100)
                stats['recent_commits'] = random.randint(3, 10)
                stats['files_count'] = random.randint(20, 50)
                
                # Generate synthetic weekly activity
                for week in stats['weekly_activity']:
                    week['commits'] = random.randint(2, 15)
                
                # Generate synthetic extensions data
                extensions = {
                    'py': random.randint(5, 20),
                    'js': random.randint(4, 15),
                    'html': random.randint(3, 12),
                    'css': random.randint(3, 10),
                    'md': random.randint(2, 8),
                    'json': random.randint(2, 6),
                    'txt': random.randint(1, 5),
                    'yml': random.randint(1, 4),
                    'png': random.randint(0, 3),
                    'java': random.randint(0, 2)
                }
                stats['extensions'] = {k: v for k, v in extensions.items() if v > 0}
            
            generate_report(stats, 'showcase/analytics/repo_stats.md')
            generate_activity_chart(stats, 'showcase/analytics/activity_chart.png')
            generate_file_types_chart(stats, 'showcase/analytics/file_types_chart.png')
            
            print("Repository statistics generated successfully!")
            
        except Exception as e:
            print(f"Error generating statistics: {e}")
            with open('showcase/analytics/error_report.md', 'w') as f:
                f.write(f"# Error Generating Statistics\n\n")
                f.write(f"An error occurred: {str(e)}\n")
        EOF
        
        python gen_stats.py
        
        # Create an index file for the analytics
        cat > showcase/analytics/index.md << EOF
        # Repository Analytics
        
        ![Activity Chart](activity_chart.png)
        
        ![File Types](file_types_chart.png)
        
        [View full statistics report](repo_stats.md)
        
        Generated on ${{ steps.content_type.outputs.date }} at ${{ steps.content_type.outputs.timestamp }}
        EOF
    
    - name: Generate project template
      if: steps.content_type.outputs.type == 'project' || steps.content_type.outputs.type == 'random'
      run: |
        # Generate a random project type
        PROJECT_TYPES=("web-dashboard" "cli-tool" "api-service" "data-visualization")
        RANDOM_INDEX=$(( RANDOM % 4 ))
        PROJECT_TYPE=${PROJECT_TYPES[$RANDOM_INDEX]}
        
        PROJECT_DIR="showcase/projects/project-${{ steps.content_type.outputs.date }}"
        mkdir -p $PROJECT_DIR
        
        # Create a README.md for the project
        cat > $PROJECT_DIR/README.md << EOF
        # ${PROJECT_TYPE^} Project
        
        Generated on ${{ steps.content_type.outputs.date }} at ${{ steps.content_type.outputs.timestamp }}
        
        ## Overview
        
        This is a template for a new ${PROJECT_TYPE} project. Use this as a starting point for your next awesome creation!
        
        ## Features
        
        - Feature 1: Description of the first key feature
        - Feature 2: Description of the second key feature
        - Feature 3: Description of the third key feature
        
        ## Getting Started
        
        \`\`\`bash
        # Clone the repository
        git clone https://github.com/yourusername/project-name.git
        
        # Install dependencies
        cd project-name
        npm install  # or pip install -r requirements.txt
        
        # Run the project
        npm start  # or python main.py
        \`\`\`
        
        ## Project Structure
        
        \`\`\`
        project-name/
        ├── docs/               # Documentation files
        ├── src/                # Source code
        │   ├── components/     # Reusable components
        │   ├── utils/          # Utility functions
        │   └── index.js        # Entry point
        ├── tests/              # Test files
        ├── .gitignore          # Git ignore file
        ├── package.json        # Project metadata and dependencies
        └── README.md           # Project documentation
        \`\`\`
        
        ## License
        
        MIT License
        EOF
        
        # Create a basic file structure based on project type
        mkdir -p $PROJECT_DIR/src
        mkdir -p $PROJECT_DIR/tests
        mkdir -p $PROJECT_DIR/docs
        
        # Create .gitignore
        cat > $PROJECT_DIR/.gitignore << EOF
        # Dependency directories
        node_modules/
        venv/
        __pycache__/
        
        # Environment files
        .env
        .env.local
        
        # Build outputs
        dist/
        build/
        
        # Logs
        logs/
        *.log
        
        # Editor directories and files
        .idea/
        .vscode/
        *.swp
        *.swo
        
        # OS files
        .DS_Store
        Thumbs.db
        EOF
        
        # Create different files based on project type
        if [[ "$PROJECT_TYPE" == "web-dashboard" ]]; then
            mkdir -p $PROJECT_DIR/src/components
            mkdir -p $PROJECT_DIR/src/utils
            mkdir -p $PROJECT_DIR/src/assets
            
            # Create an index.html file
            cat > $PROJECT_DIR/src/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Web Dashboard</title>
            <link rel="stylesheet" href="styles.css">
        </head>
        <body>
            <div class="dashboard">
                <header class="header">
                    <div class="logo">Dashboard</div>
                    <nav class="nav">
                        <ul>
                            <li><a href="#" class="active">Home</a></li>
                            <li><a href="#">Analytics</a></li>
                            <li><a href="#">Reports</a></li>
                            <li><a href="#">Settings</a></li>
                        </ul>
                    </nav>
                    <div class="user-menu">
                        <span class="username">User</span>
                        <div class="avatar"></div>
                    </div>
                </header>
                
                <main class="content">
                    <div class="sidebar">
                        <div class="sidebar-header">Main Menu</div>
                        <ul class="sidebar-menu">
                            <li><a href="#"><i class="icon">📊</i> Dashboard</a></li>
                            <li><a href="#"><i class="icon">📈</i> Analytics</a></li>
                            <li><a href="#"><i class="icon">📝</i> Reports</a></li>
                            <li><a href="#"><i class="icon">⚙️</i> Settings</a></li>
                            <li><a href="#"><i class="icon">👥</i> Users</a></li>
                            <li><a href="#"><i class="icon">🔔</i> Notifications</a></li>
                        </ul>
                    </div>
                    
                    <div class="main-content">
                        <div class="widget-container">
                            <div class="widget">
                                <div class="widget-header">
                                    <h3>Revenue</h3>
                                </div>
                                <div class="widget-content">
                                    <div class="metric">\$24,500</div>
                                    <div class="trend positive">+15%</div>
                                </div>
                            </div>
                            
                            <div class="widget">
                                <div class="widget-header">
                                    <h3>Users</h3>
                                </div>
                                <div class="widget-content">
                                    <div class="metric">1,245</div>
                                    <div class="trend positive">+8%</div>
                                </div>
                            </div>
                            
                            <div class="widget">
                                <div class="widget-header">
                                    <h3>Conversion</h3>
                                </div>
                                <div class="widget-content">
                                    <div class="metric">4.6%</div>
                                    <div class="trend negative">-2%</div>
                                </div>
                            </div>
                            
                            <div class="widget">
                                <div class="widget-header">
                                    <h3>Sessions</h3>
                                </div>
                                <div class="widget-content">
                                    <div class="metric">3,789</div>
                                    <div class="trend positive">+12%</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="chart-container">
                            <div class="chart">
                                <div class="chart-header">
                                    <h3>Monthly Revenue</h3>
                                </div>
                                <div class="chart-content">
                                    <!-- Chart will be rendered here -->
                                    <div class="chart-placeholder">Chart Placeholder</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="table-container">
                            <div class="table-header">
                                <h3>Recent Activities</h3>
                            </div>
                            <table class="data-table">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>User</th>
                                        <th>Activity</th>
                                        <th>Date</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>#1234</td>
                                        <td>John Doe</td>
                                        <td>Purchased Premium Plan</td>
                                        <td>Today, 10:30 AM</td>
                                        <td><span class="status completed">Completed</span></td>
                                    </tr>
                                    <tr>
                                        <td>#1235</td>
                                        <td>Jane Smith</td>
                                        <td>Updated Profile</td>
                                        <td>Today, 09:45 AM</td>
                                        <td><span class="status completed">Completed</span></td>
                                    </tr>
                                    <tr>
                                        <td>#1236</td>
                                        <td>Robert Johnson</td>
                                        <td>Cancelled Subscription</td>
                                        <td>Yesterday, 03:30 PM</td>
                                        <td><span class="status pending">Pending</span></td>
                                    </tr>
                                    <tr>
                                        <td>#1237</td>
                                        <td>Emily Davis</td>
                                        <td>Requested Refund
