name: Simple Daily Commits

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at noon UTC
  workflow_dispatch:
    inputs:
      content_type:
        description: 'Content type'
        required: false
        default: 'simple'
        type: choice
        options:
          - simple
          - code
          - quote

jobs:
  daily-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Git
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
    
    - name: Determine content type
      id: content
      run: |
        DATE=$(date +'%Y-%m-%d')
        TIME=$(date +'%H:%M:%S UTC')
        
        if [[ "${{ github.event.inputs.content_type }}" == "code" ]]; then
          TYPE="code"
        elif [[ "${{ github.event.inputs.content_type }}" == "quote" ]]; then
          TYPE="quote"
        else
          TYPES=("simple" "code" "quote")
          TYPE=${TYPES[$((RANDOM % 3))]}
        fi
        
        echo "type=$TYPE" >> $GITHUB_OUTPUT
        echo "date=$DATE" >> $GITHUB_OUTPUT
        echo "time=$TIME" >> $GITHUB_OUTPUT
    
    - name: Generate content
      run: |
        mkdir -p activity
        DATE="${{ steps.content.outputs.date }}"
        TIME="${{ steps.content.outputs.time }}"
        TYPE="${{ steps.content.outputs.type }}"
        
        case $TYPE in
          "code")
            cat > "activity/code-sample-${DATE}.py" << 'EOF'
        # Daily Code Sample
        from datetime import datetime
        import random

        def generate_daily_insight():
            """Generate a random programming insight."""
            insights = [
                "Clean code is not written by following a set of rules, but by carefully considering readability.",
                "The best programs are written when the programmer is in a state of flow.",
                "Code is read more often than it's written.",
                "Debugging is twice as hard as writing the code in the first place."
            ]
            
            return {
                'insight': random.choice(insights),
                'date': datetime.now().strftime('%Y-%m-%d'),
                'language': 'Python'
            }

        if __name__ == "__main__":
            daily = generate_daily_insight()
            print(f"Today's insight ({daily['date']}): {daily['insight']}")
        EOF
            echo "Generated code sample for $DATE"
            ;;
            
          "quote")
            # Fallback quote in case API fails
            QUOTE="Code is like humor. When you have to explain it, it's bad. - Cory House"
            
            # Try to fetch from API with timeout and fallback
            if command -v curl >/dev/null 2>&1; then
              API_RESPONSE=$(timeout 10 curl -s 'https://programming-quotesapi.vercel.app/api/random' 2>/dev/null || echo "")
              if [[ -n "$API_RESPONSE" ]] && echo "$API_RESPONSE" | grep -q "quote"; then
                QUOTE=$(echo "$API_RESPONSE" | python3 -c "
        import sys, json
        try:
            data = json.load(sys.stdin)
            print(f\"{data.get('quote', 'Code is like humor.')}\")
        except:
            print('Code is like humor. When you have to explain it, it is bad.')
        " 2>/dev/null || echo "Code is like humor. When you have to explain it, it's bad.")
              fi
            fi
            
            cat > "activity/daily-quote-${DATE}.md" << EOF
        # Daily Programming Quote - $DATE

        > $QUOTE

        *Generated on $DATE at $TIME*

        ## Reflection

        Take a moment to think about how this applies to your current projects.

        ---
        *Daily wisdom for developers*
        EOF
            echo "Generated quote for $DATE"
            ;;
            
          *)
            # Simple activity log
            echo "# Daily Activity - $DATE" >> activity/daily-log.md
            echo "" >> activity/daily-log.md
            echo "**Time:** $TIME" >> activity/daily-log.md
            echo "**Status:** Active and coding! üöÄ" >> activity/daily-log.md
            echo "" >> activity/daily-log.md
            echo "---" >> activity/daily-log.md
            echo "" >> activity/daily-log.md
            echo "Generated simple activity log for $DATE"
            ;;
        esac
    
    - name: Commit and push changes
      run: |
        DATE="${{ steps.content.outputs.date }}"
        TYPE="${{ steps.content.outputs.type }}"
        
        git add activity/
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        case $TYPE in
          "code")
            COMMIT_MSG="‚ú® Daily code sample: $DATE"
            ;;
          "quote")
            COMMIT_MSG="üí≠ Daily quote: $DATE"
            ;;
          *)
            COMMIT_MSG="üìù Daily activity: $DATE"
            ;;
        esac
        
        git commit -m "$COMMIT_MSG"
        git push
        
        echo "‚úÖ Successfully committed $TYPE content for $DATE"
    
    - name: Report status
      if: always()
      run: |
        if [[ ${{ job.status }} == 'success' ]]; then
          echo "üéâ Workflow completed successfully!"
        else
          echo "‚ùå Workflow failed. Check the logs above for details."
        fi
