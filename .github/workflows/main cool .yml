name: GitHub Profile Enhancer

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at noon UTC
    - cron: '0 0 * * 1'   # Extra run on Mondays at midnight UTC
  workflow_dispatch:
    inputs:
      commit_type:
        description: 'Content type'
        required: true
        default: 'random'
        type: choice
        options:
          - random
          - code
          - quote
          - stats

jobs:
  enhance-profile:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests matplotlib numpy pandas

    - name: Set up Git identity
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
    
    - name: Create content directory
      run: mkdir -p content
    
    - name: Generate daily content
      run: |
        # Determine content type
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.commit_type }}" != "random" ]]; then
          TYPE="${{ github.event.inputs.commit_type }}"
        else
          # Choose random content type
          TYPES=("code" "quote" "stats")
          RANDOM_INDEX=$(( RANDOM % 3 ))
          TYPE="${TYPES[$RANDOM_INDEX]}"
        fi
        
        DATE=$(date +'%Y-%m-%d')
        echo "Creating $TYPE content for $DATE"
        
        # Create a markdown file based on the selected type
        if [[ "$TYPE" == "code" ]]; then
          cat > content/daily_code_$DATE.md << EOF
        # Daily Code Sample - $DATE
        
        ## Python Data Visualization Example
        
        \`\`\`python
        import matplotlib.pyplot as plt
        import numpy as np
        
        # Generate sample data
        x = np.linspace(0, 10, 100)
        y1 = np.sin(x)
        y2 = np.cos(x)
        y3 = np.sin(x) * np.cos(x)
        
        # Create visualization
        plt.figure(figsize=(10, 6))
        plt.plot(x, y1, label='sin(x)', color='blue')
        plt.plot(x, y2, label='cos(x)', color='red')
        plt.plot(x, y3, label='sin(x)*cos(x)', color='green')
        plt.title('Trigonometric Functions')
        plt.xlabel('x')
        plt.ylabel('y')
        plt.legend()
        plt.grid(True)
        plt.savefig('trig_functions.png')
        \`\`\`
        
        ## JavaScript Component
        
        \`\`\`javascript
        class ThemeToggle {
          constructor() {
            this.theme = localStorage.getItem('theme') || 'light';
            this.initTheme();
            this.setupListeners();
          }
          
          initTheme() {
            document.body.classList.add(this.theme);
            document.documentElement.setAttribute('data-theme', this.theme);
          }
          
          setupListeners() {
            const toggleBtn = document.getElementById('theme-toggle');
            if (toggleBtn) {
              toggleBtn.addEventListener('click', () => this.toggleTheme());
            }
          }
          
          toggleTheme() {
            const newTheme = this.theme === 'light' ? 'dark' : 'light';
            document.body.classList.replace(this.theme, newTheme);
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            this.theme = newTheme;
          }
        }
        
        // Initialize theme toggle
        new ThemeToggle();
        \`\`\`
        EOF
        elif [[ "$TYPE" == "quote" ]]; then
          cat > content/daily_inspiration_$DATE.md << EOF
        # Daily Inspiration - $DATE
        
        > "Clean code always looks like it was written by someone who cares." - Robert C. Martin
        
        ## Today's Focus
        
        1. Write maintainable code
        2. Learn something new
        3. Help a fellow developer
        
        ## Weekly Goals
        
        - [ ] Refactor that problematic module
        - [ ] Complete the current sprint tasks
        - [ ] Research new technologies
        - [ ] Update documentation
        - [ ] Share knowledge with the team
        EOF
        elif [[ "$TYPE" == "stats" ]]; then
          cat > content/repo_stats_$DATE.md << EOF
        # Repository Statistics - $DATE
        
        ## Summary
        
        - Files: $(git ls-files | wc -l)
        - Commits: $(git rev-list --count HEAD)
        - Contributors: $(git log --format='%aN' | sort -u | wc -l)
        - Last updated: $(git log -1 --format=%cd)
        
        ## Activity
        
        Recent commits:
        
        $(git log -5 --pretty=format:"- %s (%ar)" | sed 's/^/    /')
        
        ## File Types
        
        $(git ls-files | grep -o '\.[^./]*$' | sort | uniq -c | sort -nr | head -n 10 | awk '{printf "- %s: %s files\\n", \$2, \$1}')
        EOF
        fi
    
    - name: Commit and push changes
      run: |
        git add content/
        git commit -m "Daily update: $(date +'%Y-%m-%d')" || echo "No changes to commit"
        git push origin || (git pull --rebase && git push origin)
